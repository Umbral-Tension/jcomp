#!/bin/bash

# * This script uses rsync to create full and incremental backups of the directories src(1)-src(n) in the directory backups.
# 
# * To achieve the incremental backups rsync is used as follows: rsync -avPh --link-dest=DIR --delete SRC... [DEST]
#     * --link-dest=DIR instructs rsync to search through DIR on the DEST machine for an exact match to the files in SRC. If
#     it finds a match, a hard link is made in DEST pointing to that file in DIR, rather than the file being copied from SRC 
#     to DEST. In this script --link-dest=DIR is set to a symlink that points to the latest backup. Therefore, for each file
#     in SRC rsync finds its match in the latest backup and, if it  hasn't changed, hardlinks to it. The hardlinking allows
#     for many incremental backups to be made with little more storage than is required for a single full backup. 
#         * The first time the script is run "current" doesn't exist, so rsync ignores the --link-dest option and does a full 
#         copy of SRC to DEST, i.e. "a full backup". Full and icnremental backups are labeled as such in their directory name.  
#         * Because rsync ignores non-existent --link-dest, accidentally or intenntionally deleting current symlink  or its 
#         target just results in a new full backup being created.                
#     
#     * --delete Allows file deletions in SRC to be reflected in DEST. That is, if a file in SRC is deleted, the next time rsync 
#     runs it will delete that file in DEST. 
#     
# * Note: If one of SRC does not exist, rsync still exits with code 0. The backup will not be marked failed, and the non-existent
#   SRC directory will not appear in that or subsequent backups, but it will still exist in previous backups. 
# * Note: After a failed backup current points to the latest backup that succeeded. Subsequent backups may be run with no consequence.
# * Credit to Samuel Hewitt for the outline of this script: https://samuelhewitt.com/blog/2018-06-05-time-machine-style-backups-with-rsync

echo -e "//////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////"
echo -e "////////// Jeremy's incremental rsync backup  ////////////\n"
echo -e "long options:\t"
mylongopts=( --full --exclude-large --dry-run "--path-to-backups=path (i.e. specify an alternate external drive)" )
for x in "${mylongopts[@]}"; do
    echo -e "\t$x"; done
echo -e "\n"


# Option Handling
die() { echo "$*" >&2; exit 2; }  # complain to STDERR and exit with error
needs_arg() { if [ -z "$OPTARG" ]; then die "No arg for --$OPT option"; fi; }

OPTSTRING="f-:"
while getopts "$OPTSTRING" OPT; do
    # support long options: https://stackoverflow.com/a/28466267/519360
    if [ "$OPT" = "-" ]; then       # long option: reformulate OPT and OPTARG
        OPT="${OPTARG%%=*}"         # extract long option name
        OPTARG="${OPTARG#$OPT}"     # extract long option argument (may be empty)
        OPTARG="${OPTARG#=}"        # if long option argument, remove assigning `=`
    fi
    case "$OPT" in
        full )              do_full=true ;;
        exclude-large )     exclude_large=true ;;
        dry-run )           dry_run=true ;;
        path-to-backups )   path_to_backups="$OPTARG" ;;
        ??* )               die "Illegal option --$OPT" ;;  # bad long option
        ? )                 exit 2 ;;  # bad short option (error reported via getopts)
    esac
done
shift $((OPTIND-1)) # remove parsed options and args from $@ list
# End Option Handling

TIMESTAMP=`date "+%Y-%m-%d@%H:%M:%S"`

# Directories to backup. 
# These MUST NOT end with a slash or rsync will copy only their contents rather than the directory AND its contents.
src=(   "/home/jeremy/jdata"
        "/home/jeremy/Desktop"
        "/home/jeremy/jdata/jvault" )
        # "/home/jeremy/Downloads"    Downloads folder is currently just a link to jdata/downloads so so it's already covered.

# dirs/files to exclude from the backup. These are given as rsync "filter rules"
# note: Don't understand why, but the dir to filter must be given as how it will appear in the Destination, not how it appears locally. I.E. jdata/git-repos instead of /home/jeremy/jdata/git-repos
exclusions=(    "--exclude=jdata/git-repos"         # syncing issues
                "--exclude=jdata/jvault"            # --^
                "--exclude=jdata/videos/tv"         # already stored on backup drive
                "--exclude=jdata/videos/movies" )   # --^

# Default directory to put backups into
backups="/run/media/jeremy/internal_6TB/rsync_backups"
# set alternative backup location if long option was given (explanation:  https://stackoverflow.com/a/13864829)
if ! [ -z ${path_to_backups+x} ]; then backups="$path_to_backups"; fi
mkdir -p "$backups" 

# paths to the new backup being created and the current latest backup
current="$backups/current"  
if ! [[ -e "$current" ]] || [[ "$do_full" == true ]]; then {
    newbackup="$backups/${TIMESTAMP}_(Full)"
}
else
    newbackup="$backups/${TIMESTAMP}_(Incremental)"
fi

# Build and run an rsync command to create a new backup. Send stdout and stderr to file.
rs_opts=( --debug=FILTER --human-readable --progress --archive --delete --partial "--log-file=$backups/temp rsync log" )
# don't do incremental if full option is given
! [[ "$do_full" == true ]] && rs_opts+=( --link-dest="$current" )
[[ $dry_run == true ]] && rs_opts+=( "--dry-run" )
[[ $exclude_large == true ]] && rs_opts+=( "--max-size=10gb" )
rs_opts+=( "${exclusions[@]}" )

echo "running rsync as follows (unquoted spaces here are not actually passed to rsync that way): " 
echo -e "rsync " "${rs_opts[@]}" "${src[@]}" "$newbackup" "2>" "$backups/temp rsync stderr" "| tee" "$backups/temp rsync stdout" "\n\n"

rsync "${rs_opts[@]}" "${src[@]}" "$newbackup" 2> "$backups/temp rsync stderr" | tee "$backups/temp rsync stdout"
rsyncexit="$?"

if [[ $dry_run == true ]]; then {
    echo -e "\n\n\n////////// Jeremy's incremental rsync backup  ////////////"
    echo -e "DRY-RUN finished." 
    mv "$backups/temp rsync stderr" "$backups/${TIMESTAMP} DRY-RUN rsync stderr"
    mv "$backups/temp rsync stdout" "$backups/${TIMESTAMP} DRY-RUN rsync stdout"
    mv "$backups/temp rsync log" "$backups/${TIMESTAMP} DRY-RUNrsync log"
    exit
}
fi

echo -e "\n\n////////// Jeremy's incremental rsync backup  ////////////...\n"
echo -e "rsync process finished with exit code: $rsyncexit.\nrunning diff ..."

# gather logging info 
# prepare a diff file with the first part of paths truncated up to the timestamp
if ! [[ "$do_full" == true ]]; then {
    mydiff="$newbackup/DIFF CHANGES SINCE PREVIOUS INCREMENTAL BACKUP"
    diff -rq --exclude="DIFF CHANGES SINCE PREVIOUS INCREMENTAL BACKUP" --exclude="rsync log" --exclude="rsync stdout" --exclude="rsync stderr" \
        "$newbackup" $(realpath "$current") | sort > "$mydiff"
    echo -e "\nfinished diff ($?)"
    sed -i -e "s:$backups/::g" "$mydiff"
}
fi
mv "$backups/temp rsync stderr" "$newbackup/rsync stderr"
mv "$backups/temp rsync stdout" "$newbackup/rsync stdout"
mv "$backups/temp rsync log" "$newbackup/rsync log"

# check exit status to see if backup failed
if [ "$rsyncexit" = 0 ]; then
    # remove current link
    rm -f "$current"
    # make current link to the newest backup
    ln -s "$newbackup" "$current"
    echo -e "\nBackup successful. Logs placed in $newbackup"
else
    # Rename directory if failed
    mv $newbackup "$backups/failed-$TIMESTAMP"
    echo -e "\nBackup failed. Logs placed in $backups/failed-$TIMESTAMP"
fi
