#!/bin/bash

# * This script uses rsync to create full and incremental backups of the directories src(1)-src(n) in the directory backups.
# 
# * To achieve the incremental backups rsync is used as follows: rsync -avPh --link-dest=DIR --delete SRC... [DEST]
#     * --link-dest=DIR instructs rsync to search through DIR on the DEST machine for an exact match to the files in SRC. If
#     it finds a match, a hard link is made in DEST pointing to that file in DIR, rather than the file being copied from SRC 
#     to DEST. In this script --link-dest=DIR is set to a symlink that points to the latest backup. Therefore, for each file
#     in SRC rsync finds its match in the latest backup and, if it  hasn't changed, hardlinks to it. The hardlinking allows
#     for many incremental backups to be made with little more storage than is required for a single full backup. 
#         * The first time the script is run "current" doesn't exist, so rsync ignores the --link-dest option and does a full 
#         copy of SRC to DEST, i.e. "a full backup". Therefore if a full backup is desired the user can just delete the 
#         symlink "current" and run the script. Full and icnremental backups are labeled as such in their directory name.  
#     
#     * --delete Allows file deletions in SRC to be reflected in DEST. That is, if a file in SRC is deleted, the next time rsync 
#     runs it will delete that file in DEST. 
#     
# * Note: If one of SRC does not exist, rsync still exits with code 0. The backup will not be marked failed, and the non-existent
#   SRC directory will not appear in that or subsequent backups, but it will still exist in previous backups. 
# * Note: After a failed backup current points to the latest backup that succeeded. Subsequent backups may be run with no consequence.
# * Credit to Samuel Hewitt for the basic outline of this script: https://samuelhewitt.com/blog/2018-06-05-time-machine-style-backups-with-rsync



TIMESTAMP=`date "+%Y-%m-%d@%H:%M:%S"`

# Directories to backup. 
# These MUST NOT end with a slash or rsync will copy their contents rather than the directories AND their contents.
src1="/home/jeremy/@data"
src2="/home/jeremy/Desktop"
src3="/home/jeremy/Downloads"

# Directory to put backups into
backups="/media/jeremy/extHDD_jdata/rsync-backups"

# paths to the new backup being created and the current latest backup
current="$backups/current"
if [[ -e "$current" ]]; then
    newbackup="$backups/${TIMESTAMP}_(Incremental)"
else
    newbackup="$backups/${TIMESTAMP}_(Full)"
fi

# create new backup using rsync. Send stdout and stderr to file. 
rsync -avPh --delete --log-file="$backups/temp rsync log" --link-dest="$current" "$src1" "$src2" "$src3" "$newbackup" 2>&1 | tee "$backups/temp rsync stdout + stderr"
rsyncexit="$?"

# gather logging info 
# prepare a diff file with the first part of paths truncated up to the timestamp
mydiff="$newbackup/DIFF CHANGES SINCE PREVIOUS INCREMENTAL BACKUP"
diff -rq --exclude="DIFF CHANGES SINCE PREVIOUS INCREMENTAL BACKUP" --exclude="rsync log" --exclude="rsync stdout + stderr" \
    "$newbackup" $(realpath "$current") | sort > "$mydiff"
sed -i -e "s:$backups/::g" "$mydiff"
mv "$backups/temp rsync stdout + stderr" "$newbackup/rsync stdout + stderr"
mv "$backups/temp rsync log" "$newbackup/rsync log"

# check exit status to see if backup failed
if [ "$rsyncexit" = 0 ]; then
    # remove current link
    rm -f "$current"
    # make current link to the newest backup
    ln -s "$newbackup" "$current"
    echo "Backup successful. Logs placed in $newbackup"
else
    # Rename directory if failed
    mv $newbackup $backups/failed-$TIMESTAMP
    echo "Backup failed. Logs placed in $newbackup"
fi

